{
 "cells": [
  {
   "cell_type": "code",
   "id": "60d8296c-c3a5-42f2-be88-68b877145ac5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "bcsc_paths = [\n",
    "    \"../data/bcsc_risk_factors_summarized1_092020.csv\",\n",
    "    \"../data/bcsc_risk_factors_summarized2_092020.csv\",\n",
    "    \"../data/bcsc_risk_factors_summarized3_092020.csv\"\n",
    "]\n",
    "\n",
    "df_list = []\n",
    "for path in bcsc_paths:\n",
    "    df = pd.read_csv(path)\n",
    "    print(f\"Loaded {path}, shape: {df.shape}\")\n",
    "    df_list.append(df)\n",
    "\n",
    "bcsc_df = pd.concat(df_list, ignore_index=True)\n",
    "bcsc_df_clean = bcsc_df[bcsc_df['breast_cancer_history'] != 9].reset_index(drop=True)\n",
    "print(f\"DataFrame shape after dropping: {bcsc_df_clean.shape}\")\n",
    "\n",
    "# Count how many rows dropped\n",
    "dropped_count = bcsc_df.shape[0] - bcsc_df_clean.shape[0]\n",
    "print(f\"Dropped rows: {dropped_count}\")\n",
    "\n",
    "# 3. Save cleaned concatenated DataFrame\n",
    "df_clean_path = \"../data/bcsc_concatenated_no_hist9.csv\"\n",
    "bcsc_df_clean.to_csv(df_clean_path, index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "id": "55c67743-6c6c-4485-ae50-fa2e6544d60b",
   "metadata": {},
   "outputs": [],
   "source": [
    "risk_factors = pd.read_csv('../data/bcsc_concatenated_no_hist9.csv')\n",
    "print(risk_factors.head(2))"
   ]
  },
  {
   "cell_type": "code",
   "id": "7696b515-f880-41c5-93dc-f0a69be9f78b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import joblib\n",
    "import xgboost as xgb\n",
    "import os\n",
    "\n",
    "# -----------------------------------------\n",
    "# Inject custom CSS for a professional blue-gray theme\n",
    "# -----------------------------------------\n",
    "custom_css = '''\n",
    "<style>\n",
    "/* Set a light gray background for the main area */\n",
    ".reportview-container, .main .block-container {\n",
    "    background-color: #f5f7fa;\n",
    "}\n",
    "/* Set sidebar background and text color */\n",
    ".sidebar .sidebar-content {\n",
    "    background-color: #2c3e50;\n",
    "    color: #ecf0f1;\n",
    "}\n",
    "/* Style the header text */\n",
    ".stApp h1 {\n",
    "    color: #2c3e50;\n",
    "}\n",
    ".stApp h2, .stApp h3, .stApp h4 {\n",
    "    color: #34495e;\n",
    "}\n",
    "/* Button styling */\n",
    ".stButton > button {\n",
    "    background-color: #2980b9;\n",
    "    color: white;\n",
    "    border-radius: 5px;\n",
    "    padding: 0.5em 1em;\n",
    "}\n",
    "/* Input widget labels */\n",
    ".stLabel {\n",
    "    color: #2c3e50;\n",
    "}\n",
    "</style>\n",
    "'''\n",
    "\n",
    "st.markdown(custom_css, unsafe_allow_html=True)\n",
    "\n",
    "# -----------------------------------------\n",
    "# Load trained XGBoost model and encoders\n",
    "# -----------------------------------------\n",
    "MODEL_PATH = os.path.join(\"..\", \"data\", \"bcsc_xgb_model.pkl\")\n",
    "ENCODERS_PATH = os.path.join(\"..\", \"data\", \"bcsc_feature_encoders.pkl\")\n",
    "TARGET_ENCODER_PATH = os.path.join(\"..\", \"data\", \"bcsc_target_encoder.pkl\")\n",
    "\n",
    "@st.cache_resource\n",
    "def load_model_and_encoders():\n",
    "    if not os.path.exists(MODEL_PATH) or not os.path.exists(ENCODERS_PATH):\n",
    "        return None, None, None\n",
    "    model = joblib.load(MODEL_PATH)\n",
    "    feature_encoders = joblib.load(ENCODERS_PATH)\n",
    "    target_encoder = joblib.load(TARGET_ENCODER_PATH) if os.path.exists(TARGET_ENCODER_PATH) else None\n",
    "    return model, feature_encoders, target_encoder\n",
    "\n",
    "model, feature_encoders, target_encoder = load_model_and_encoders()\n",
    "\n",
    "# If model failed to load, display error and stop\n",
    "if model is None or feature_encoders is None:\n",
    "    st.error(\"Model or encoders not found. Please ensure 'bcsc_xgb_model.pkl' and 'bcsc_feature_encoders.pkl' are placed in '../data/'.\")\n",
    "    st.stop()\n",
    "\n",
    "# -----------------------------------------\n",
    "# Define mapping lists for BCSC covariates\n",
    "# -----------------------------------------\n",
    "age_group_options = [\n",
    "    \"1 = Age 18-29\", \"2 = Age 30-34\", \"3 = Age 35-39\", \"4 = Age 40-44\", \n",
    "    \"5 = Age 45-49\", \"6 = Age 50-54\", \"7 = Age 55-59\", \"8 = Age 60-64\", \n",
    "    \"9 = Age 65-69\", \"10 = Age 70-74\", \"11 = Age 75-79\", \"12 = Age 80-84\", \"13 = Age ≥85\"\n",
    "]\n",
    "race_eth_options = [\n",
    "    \"1 = Non-Hispanic white\", \"2 = Non-Hispanic black\", \"3 = Asian/Pacific Islander\", \n",
    "    \"4 = Native American\", \"5 = Hispanic\", \"6 = Other/mixed\", \"9 = Unknown\"\n",
    "]\n",
    "first_degree_hx_options = [\"0 = No\", \"1 = Yes\", \"9 = Unknown\"]\n",
    "age_menarche_options = [\"0 = Age ≥14\", \"1 = Age 12-13\", \"2 = Age <12\", \"9 = Unknown\"]\n",
    "age_first_birth_options = [\n",
    "    \"0 = Age <20\", \"1 = Age 20-24\", \"2 = Age 25-29\", \"3 = Age ≥30\", \"4 = Nulliparous\", \"9 = Unknown\"\n",
    "]\n",
    "birads_density_options = [\n",
    "    \"1 = Almost entirely fat\", \"2 = Scattered fibroglandular densities\", \n",
    "    \"3 = Heterogeneously dense\", \"4 = Extremely dense\", \"9 = Unknown/different system\"\n",
    "]\n",
    "current_hrt_options = [\"0 = No\", \"1 = Yes\", \"9 = Unknown\"]\n",
    "menopaus_options = [\"1 = Pre- or peri-menopausal\", \"2 = Post-menopausal\", \"3 = Surgical menopause\", \"9 = Unknown\"]\n",
    "bmi_group_options = [\"1 = 10-24.99\", \"2 = 25-29.99\", \"3 = 30-34.99\", \"4 = 35 or more\", \"9 = Unknown\"]\n",
    "biophx_options = [\"0 = No\", \"1 = Yes\", \"9 = Unknown\"]\n",
    "\n",
    "# -----------------------------------------\n",
    "# Streamlit App Layout\n",
    "# -----------------------------------------\n",
    "st.set_page_config(page_title=\"Breast Cancer Risk Predictor\", layout=\"centered\")\n",
    "st.title(\"Breast Cancer Risk Predictor\")\n",
    "st.write(\"Please enter your personal and clinical information below:\")\n",
    "\n",
    "# Sidebar instructions\n",
    "st.sidebar.header(\"Instructions\")\n",
    "st.sidebar.write(\"Select the options matching your profile.\\nOnce complete, click 'Predict Risk'.\")\n",
    "\n",
    "# User inputs using selectboxes with preset codes and labels\n",
    "st.header(\"Patient Covariates\")\n",
    "\n",
    "col1, col2 = st.columns(2)\n",
    "with col1:\n",
    "    age_group_sel = st.selectbox(\"Age Group (5-year)\", age_group_options)\n",
    "    race_sel = st.selectbox(\"Race/Ethnicity\", race_eth_options)\n",
    "    fhx_sel = st.selectbox(\"First-degree Family History of Breast Cancer\", first_degree_hx_options)\n",
    "    menarche_sel = st.selectbox(\"Age at Menarche\", age_menarche_options)\n",
    "    first_birth_sel = st.selectbox(\"Age at First Birth\", age_first_birth_options)\n",
    "\n",
    "with col2:\n",
    "    density_sel = st.selectbox(\"BI-RADS Breast Density\", birads_density_options)\n",
    "    hrt_sel = st.selectbox(\"Use of Hormone Replacement Therapy\", current_hrt_options)\n",
    "    menopaus_sel = st.selectbox(\"Menopausal Status\", menopaus_options)\n",
    "    bmi_sel = st.selectbox(\"BMI Group (kg/m²)\", bmi_group_options)\n",
    "    biophx_sel = st.selectbox(\"Previous Breast Biopsy/Aspiration\", biophx_options)\n",
    "\n",
    "# Function to parse selected option and extract code\n",
    "def parse_code(selection):\n",
    "    try:\n",
    "        return int(selection.split(\"=\")[0].strip())\n",
    "    except:\n",
    "        return np.nan\n",
    "\n",
    "# Gather input values into a DataFrame\n",
    "input_dict = {\n",
    "    'age_group_5_years': parse_code(age_group_sel),\n",
    "    'race_eth': parse_code(race_sel),\n",
    "    'first_degree_hx': parse_code(fhx_sel),\n",
    "    'age_menarche': parse_code(menarche_sel),\n",
    "    'age_first_birth': parse_code(first_birth_sel),\n",
    "    'BIRADS_breast_density': parse_code(density_sel),\n",
    "    'current_hrt': parse_code(hrt_sel),\n",
    "    'menopaus': parse_code(menopaus_sel),\n",
    "    'bmi_group': parse_code(bmi_sel),\n",
    "    'biophx': parse_code(biophx_sel)\n",
    "}\n",
    "\n",
    "input_df = pd.DataFrame([input_dict])\n",
    "\n",
    "# Ensure the input DataFrame has same column order as training data\n",
    "if model is not None:\n",
    "    feature_cols = model.get_booster().feature_names\n",
    "    input_df = input_df[feature_cols]\n",
    "else:\n",
    "    feature_cols = list(input_df.columns)\n",
    "    input_df = input_df[feature_cols]\n",
    "\n",
    "# Handle any missing or NaNs (shouldn't occur with selectboxes)\n",
    "input_df = input_df.fillna(0)\n",
    "\n",
    "# Predict button\n",
    "def predict_risk():\n",
    "    proba = model.predict_proba(input_df)[0]\n",
    "    classes = target_encoder.classes_ if target_encoder else [\"0\", \"1\"]\n",
    "    pred_idx = np.argmax(proba)\n",
    "    pred_label = classes[pred_idx]\n",
    "    return pred_label, proba\n",
    "\n",
    "if st.button(\"Predict Risk\"):\n",
    "    with st.spinner(\"Computing risk...\"):\n",
    "        label, probabilities = predict_risk()\n",
    "    st.subheader(\"Predicted Risk Outcome\")\n",
    "    st.write(f\"**Breast Cancer History (0 = No, 1 = Yes)**: {label}\")\n",
    "\n",
    "    # Display probability bar chart\n",
    "    prob_df = pd.DataFrame({\n",
    "        'Outcome': target_encoder.classes_ if target_encoder else [\"0\", \"1\"],\n",
    "        'Probability': probabilities\n",
    "    }).set_index('Outcome')\n",
    "    st.bar_chart(prob_df)\n",
    "\n",
    "    # Risk management recommendations\n",
    "    st.subheader(\"Risk Management Recommendations\")\n",
    "    if label == '0':\n",
    "        st.write(\"Based on your inputs, you are at lower risk. Continue routine screening and maintain a healthy lifestyle.\")\n",
    "    else:\n",
    "        st.write(\"Based on your inputs, you have elevated risk. Please consult your healthcare provider for personalized recommendations, which may include enhanced surveillance, genetic counseling, and lifestyle modifications.\")\n",
    "\n",
    "    # Supportive resources\n",
    "    st.subheader(\"Supportive Resources\")\n",
    "    st.markdown(\"- [Breast Cancer Foundation Grants](https://www.bcfoundation.org/grants)\")\n",
    "    st.markdown(\"- [Local Support Groups](https://www.breastcancer.org/support/local-groups)\")\n",
    "    st.markdown(\"- [Educational Video on Breast Health](https://www.youtube.com/watch?v=example)\")\n"
   ]
  },
  {
   "cell_type": "code",
   "id": "75ba1223-2d2f-48a7-92ad-7d9b011df80b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
